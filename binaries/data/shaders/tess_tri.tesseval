#version 430
 
layout (quads, equal_spacing, ccw) in; // triangles, quads, or isolines
in vec3 tc_Position[];
 
uniform mat4 in_WVP;
uniform int in_TessLevelInner = 64;
uniform int in_TessLevelOuter = 64;
uniform float in_P = 0.5f;
uniform float in_Zoom = 75.0f;
uniform int in_Octaves = 7;
uniform float in_HeightMax = 10.0f;

out vec3 te_Normal;
out vec2 te_TexCoord;
out float te_Height;

float findNoise(float x, float y)
{
	int n = int(x) + int(y * float(57));
	n = (n << 13) ^ n;
	int nn = (n * (n*n*60493 + 19990303) + 1376312589) & 0x7fffffff;
	return float(1.0 - nn / 1073741824.0);
}

float interpolate(float a, float b, float x)
{
	float ft = x * 3.14159f;
	float f  = float( (1.0 - cos(ft)) * 0.5 );
	return a * (float(1) - f) + b * f;
}

float _noise2(vec2 p)
{
	float floorX = float(int(p.x));
	float floorY = float(int(p.y));

	float s, t, u, v;

	s = findNoise(floorX, floorY);
	t = findNoise(floorX+1, floorY);
	u = findNoise(floorX, floorY+1);
	v = findNoise(floorX+1, floorY+1);

	float int1 = interpolate(s,t,p.x-floorX);
	float int2 = interpolate(u,v,p.x-floorX);
	return interpolate(int1,int2,p.y-floorY);
}
 
 float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 triangle_normal(vec3 p0, vec3 p1, vec3 p2)
{
	vec3 e1 = p1 - p0;
	vec3 e2 = p2 - p0;
	return cross(e1, e2);
}

float height_at(vec2 pos, float p, float zoom, int octaves, float heightMax)
{
	float totalNoise = 0.0f;
	for(int a = 0; a < octaves; ++a)
	{
		float freq = pow(2.0f,a);
		float ampl = pow(p,a);
		totalNoise += _noise2(vec2(pos.x*freq/zoom, (pos.y/zoom*freq)))*ampl;
	}
	
	return totalNoise * heightMax;
}

void main ()
{
	vec2 size = vec2(64, 64);
	vec2 div = size * 1.0 / float(in_TessLevelInner);
	
	vec2 uv = tc_Position[0].xz + gl_TessCoord.st;
	
	vec3 pts[3][3];
	for(int i = 0; i < 3; ++i)
	{
		for(int j = 0; j < 3; ++j)
		{
			pts[i][j].xz = uv * size + vec2(i-1, j-1);
			pts[i][j].y = height_at(pts[i][j].xz, in_P, in_Zoom, in_Octaves, in_HeightMax);
		}
	}
	
	vec3 Nwnw = triangle_normal(pts[1][1], pts[1][0], pts[0][0]);
	vec3 Nnwn = triangle_normal(pts[1][1], pts[0][0], pts[0][1]);
	vec3 Nnne = triangle_normal(pts[1][1], pts[0][1], pts[0][2]);
	vec3 Nnee = triangle_normal(pts[1][1], pts[0][2], pts[1][2]);
	vec3 Nese = triangle_normal(pts[1][1], pts[1][2], pts[2][2]);
	vec3 Nses = triangle_normal(pts[1][1], pts[2][2], pts[2][1]);
	vec3 Nssw = triangle_normal(pts[1][1], pts[2][1], pts[2][0]);
	vec3 Nsww = triangle_normal(pts[1][1], pts[2][0], pts[1][0]);
	
	te_Normal = Nwnw+Nnwn+Nnne+Nnee+Nese+Nses+Nssw+Nsww;
	te_TexCoord = gl_TessCoord.st*2.0f;
	te_Height = pts[1][1].y;
	gl_Position = in_WVP * vec4(pts[1][1], 1);
}