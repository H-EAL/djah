#include "system/opengl/gl.hpp"
#include "video/ogl/buffers/render_buffer.hpp"

#include "debug/logger.hpp"

namespace djah { namespace video { namespace ogl {

	//----------------------------------------------------------------------------------------------
	render_buffer::render_buffer(int width, int height)
		: texture(width, height)
	{
		aquire();
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	render_buffer::~render_buffer()
	{
		release();
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	void render_buffer::aquire()
	{
		glGenRenderbuffers(1, &id_);
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	void render_buffer::release()
	{
		glDeleteRenderbuffers(1, &id_);
		id_ = INVALID_ID;
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	bool render_buffer::isValidResource() const
	{
		return glIsRenderbuffer(id_) != 0;
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	void render_buffer::bind() const
	{
		glBindRenderbuffer(GL_RENDERBUFFER, id_);
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	void render_buffer::unbind()
	{
		glBindRenderbuffer(GL_RENDERBUFFER, 0);
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	void render_buffer::initialize(E_INTERNAL_FORMAT internalFormat)
	{
		glRenderbufferStorage(GL_RENDERBUFFER, internalFormat, width_, height_);
	}
	//----------------------------------------------------------------------------------------------

} /*ogl*/ } /*video*/ } /*djah*/
