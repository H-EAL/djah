#ifndef DJAH_MATH_MATRIX4_HPP
#define DJAH_MATH_MATRIX4_HPP

#include "matrix.hpp"

namespace djah { namespace math {
	
	//----------------------------------------------------------------------------------------------
	template<typename T>
	struct matrix_base<4,4,T>
	{
		matrix_base() { memset(data, 0, 4*4*sizeof(T)); }
		matrix_base(T _11_, T _12_, T _13_, T _14_,  T _21_, T _22_, T _23_, T _24_,  T _31_, T _32_, T _33_, T _34_,  T _41_, T _42_, T _43_, T _44_)
			: _11(_11_), _12(_12_), _13(_13_), _14(_14_)
			, _21(_21_), _22(_22_), _23(_23_), _24(_24_)
			, _31(_31_), _32(_32_), _33(_33_), _34(_34_)
			, _41(_41_), _42(_42_), _43(_43_), _44(_44_)
		{}
		
		union
		{
			struct
			{
				T _11, _12, _13, _14;
				T _21, _22, _23, _24;
				T _31, _32, _33, _34;
				T _41, _42, _43, _44;
			};
			T data[4][4];
		};

		// Useful constant
		static const matrix<4,4,T> identity;
	};
	//----------------------------------------------------------------------------------------------
	
	//----------------------------------------------------------------------------------------------
	template<typename T>
	const matrix<4,4,T> matrix_base<4,4,T>::identity = matrix<4,4,T>(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	typedef matrix<4,4,int>		matrix4i;
	typedef matrix<4,4,float>	matrix4f;
	typedef matrix<4,4,double>	matrix4d;
	//----------------------------------------------------------------------------------------------

} /*math*/ } /*djah*/

#endif /* DJAH_MATH_MATRIX4_HPP */