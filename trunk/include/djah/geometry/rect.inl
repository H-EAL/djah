namespace djah { namespace geometry {

	//----------------------------------------------------------------------------------------------
	template<typename T>
	rect<T>::rect(T left, T top, T right, T bottom)
		: topLeft_(left, top)
		, bottomRight_(right, bottom)
	{

	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	template<typename T>
	rect<T>::rect(const math::vector<2,T> &top_left, const math::vector<2,T> &bottom_right)
		: topLeft_(top_left)
		, bottomRight_(bottom_right)
	{

	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	template<typename T>
	rect<T>::rect(const math::vector<2,T> &top_left, T width, T height)
		: topLeft_(top_left)
		, bottomRight_(top_left.x + width, top_left.y + height)
	{

	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline void rect<T>::repair()
	{
		if( topLeft_.x > bottomRight_.x )
			std::swap(topLeft_.x, bottomRight_.x);
		if( topLeft_.y > bottomRight_.y )
			std::swap(topLeft_.y, bottomRight_.y);
	}
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline void rect<T>::invalidate()
	{
		topLeft_.x = topLeft_.y = std::numeric_limits<T>::max();
		bottomRight_.x = bottomRight_.y = -std::numeric_limits<T>::max();
	}
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline bool rect<T>::isValid() const
	{
		return (topLeft_.x < bottomRight_.x) && (topLeft_.y < bottomRight_.y);
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline T rect<T>::width() const
	{
		return std::abs(bottomRight_.x - topLeft_.x);
	}
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline T rect<T>::height() const
	{
		return std::abs(bottomRight_.y - topLeft_.y);
	}
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline math::vector<2,T> rect<T>::extent() const
	{
		return math::create_vector(topLeft_, bottomRight_);
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline math::vector<2,T>& rect<T>::topLeft()
	{
		return topLeft_;
	}
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline math::vector<2,T>& rect<T>::bottomRight()
	{
		return bottomRight_;
	}
	//----------------------------------------------------------------------------------------------


	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline const math::vector<2,T>& rect<T>::topLeft() const
	{
		return topLeft_;
	}
	//----------------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------------
	template<typename T>
	inline const math::vector<2,T>& rect<T>::bottomRight() const
	{
		return bottomRight_;
	}
	//----------------------------------------------------------------------------------------------

} /*geometry*/ } /*djah*/